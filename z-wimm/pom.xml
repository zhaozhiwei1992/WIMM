<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.z</groupId>
    <artifactId>z-wimm</artifactId>
    <version>${revision}</version>
    <packaging>jar</packaging>
    <name>z-wimm</name>
    <url>http://maven.apache.org</url>
    <description>
        一些业务的模拟演示, 比如走走工作流了, 动态做一些页面了, 都在这里做示例
    </description>
    <properties>
        <revision>1.0-SNAPSHOT</revision>
        <java.version>21</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <lombok.version>1.18.34</lombok.version>
        <spring.boot.version>3.3.3</spring.boot.version>
        <mapstruct.version>1.5.3.Final</mapstruct.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.z</groupId>
                <artifactId>z-dependencies</artifactId>
                <version>${revision}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!--    模块部分 开始    注:除system外其他module可以按需使用, 可以干掉 -->
        <!--    基础性的系统功能-->
        <dependency>
            <groupId>com.z</groupId>
            <artifactId>z-module-system</artifactId>
            <version>${revision}</version>
        </dependency>

        <!--    模块部分 结束 -->

        <!-- spring boot 配置所需依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.z</groupId>
            <artifactId>z-starter-banner</artifactId>
        </dependency>

        <!-- 服务保障相关 -->
        <dependency>
            <groupId>com.z</groupId>
            <artifactId>z-starter-job</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <profiles.active>dev</profiles.active>
                <app.version>${revision}</app.version>
                <skipTest>false</skipTest>
                <skipITest>true</skipITest>
            </properties>
            <build>
                <!--        spring.profiles.active替换-->
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <excludes>
                            <exclude>application-test.yml</exclude>
                            <exclude>application-prod.yml</exclude>
                        </excludes>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
        </profile>

        <profile>
            <id>test</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <profiles.active>test</profiles.active>
                <app.version>${revision}</app.version>
                <skipTest>false</skipTest>
                <skipITest>false</skipITest>
            </properties>
            <build>
                <!--        spring.profiles.active替换-->
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <excludes>
                            <exclude>application-dev.yml</exclude>
                            <exclude>application-prod.yml</exclude>
                        </excludes>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
        </profile>
        <profile>
            <id>prod</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <profiles.active>prod</profiles.active>
                <app.version>${revision}</app.version>
                <skipTest>false</skipTest>
                <skipITest>false</skipITest>
            </properties>
            <build>
                <!--        spring.profiles.active替换-->
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <excludes>
                            <exclude>application-dev.yml</exclude>
                            <exclude>application-test.yml</exclude>
                        </excludes>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
        </profile>

        <profile>
            <!--      前后端分离项目打成一个包-->
            <id>single</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <profiles.active>dev</profiles.active>
                <app.version>${revision}</app.version>
                <skipTest>true</skipTest>
                <skipITest>true</skipITest>
            </properties>
            <build>
                <!--        spring.profiles.active替换-->
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <excludes>
                            <exclude>application-test.yml</exclude>
                            <exclude>application-prod.yml</exclude>
                        </excludes>
                        <filtering>true</filtering>
                    </resource>
                </resources>

                <plugins>
                    <!-- 打包 -->
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <version>${spring.boot.version}</version> <!-- 如果 spring.boot.version 版本修改，则这里也要跟着修改 -->
                        <!--            <configuration>-->
                        <!--              <fork>true</fork>-->
                        <!--            </configuration>-->
                        <executions>
                            <execution>
                                <goals>
                                    <goal>repackage</goal> <!-- 将引入的 jar 打入其中 -->
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!--      异常：Invalid keystore format，spring boot配置ssl证书格式不合法解决
                    https://blog.csdn.net/chen15369337607/article/details/119883054
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>

                        <executions>
                            <execution>
                                <id>copy static</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <!-- 复制前端打包文件到这里, idea中启动需要有这一步, 如果只打jar包使用可以删掉这个execution -->
                                    <outputDirectory>../src/main/resources/static</outputDirectory>
                                    <overwrite>true</overwrite>
                                    <resources>
                                        <resource>
                                            <!-- 从前端打包的目录dist进行指定文件、文件夹内容的复制-->
                                            <directory>${frontend-dist-dir}</directory>
                                            <includes>
                                                <include>assets/</include>
                                                <include>logo.png</include>
                                                <include>favicon.ico</include>
                                                <include>index.html</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy static package</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <!-- 复制前端打包文件到编译后目录, 没有这一步编译目录和打包后的jar没有静态资源文件 -->
                                    <outputDirectory>${project.build.outputDirectory}/static</outputDirectory>
                                    <overwrite>true</overwrite>
                                    <resources>
                                        <resource>
                                            <directory>${frontend-dist-dir}</directory>
                                            <includes>
                                                <include>assets/</include>
                                                <include>logo.png</include>
                                                <include>favicon.ico</include>
                                                <include>index.html</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- 插件maven-clean-plugin，用于在编译前，清除之前编译的文件、文件夹等，避免残留之前的内容 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-clean-plugin</artifactId>
                        <version>3.1.0</version>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <!-- 前端资源目录，即：存放前端包目录-->
                                    <directory>src/main/resources/static</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>

                    <!--      使用maven命令, 将前端ui跟后端打成一个包, 不想用frontend插件,只想用本地命令-->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>exec-npm-install</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>pnpm</executable>
                                    <arguments>
                                        <argument>install</argument>
                                    </arguments>
                                    <workingDirectory>${frontend-dir}</workingDirectory>
                                </configuration>
                            </execution>

                            <execution>
                                <id>exec-npm-run-build</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>pnpm</executable>
                                    <arguments>
                                        <argument>build:single</argument>
                                    </arguments>
                                    <workingDirectory>${frontend-dir}</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <!-- 设置构建的 jar 包名 -->
        <finalName>${project.artifactId}</finalName>

        <pluginManagement>
            <plugins>
                <!-- maven-surefire-plugin 插件，用于运行单元测试。 -->
                <!-- 注意，需要使用 3.0.X+，因为要支持 Junit 5 版本 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <!-- maven-compiler-plugin 插件，解决 spring-boot-configuration-processor + Lombok + MapStruct 组合 -->
                <!-- https://stackoverflow.com/questions/33483697/re-run-spring-boot-configuration-annotation-processor-to-update-generated-metada -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <!--             Name for argument of type [java.lang.Long] not specified, and parameter name information not available via reflection-->
                        <compilerArgs>
                            <arg>-parameters</arg>
                        </compilerArgs>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-configuration-processor</artifactId>
                                <version>${spring.boot.version}</version>
                            </path>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok-mapstruct-binding</artifactId>
                                <version>0.2.0</version>
                            </path>
                            <!-- MapStruct 在编译时会通过这个插件生成代码, 去掉以后class下没有实现类 -->
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstruct.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

                <!--      异常：Invalid keystore format，spring boot配置ssl证书格式不合法解决
                https://blog.csdn.net/chen15369337607/article/details/119883054
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <configuration>
                        <nonFilteredFileExtensions>
                            <nonFilteredFileExtension>jks</nonFilteredFileExtension>
                            <nonFilteredFileExtension>otf</nonFilteredFileExtension>
                            <nonFilteredFileExtension>eot</nonFilteredFileExtension>
                            <nonFilteredFileExtension>svg</nonFilteredFileExtension>
                            <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
                            <nonFilteredFileExtension>woff</nonFilteredFileExtension>
                            <nonFilteredFileExtension>woff.bak</nonFilteredFileExtension>
                            <nonFilteredFileExtension>woff2</nonFilteredFileExtension>
                            <nonFilteredFileExtension>ico</nonFilteredFileExtension>
                        </nonFilteredFileExtensions>
                    </configuration>
                </plugin>

                <!-- 打包 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <!--          <fork>true</fork>-->
                        <!--          <classifier>bak</classifier>-->
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal> <!-- 将引入的 jar 打入其中 -->
                            </goals>
                        </execution>
                    </executions>

                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!--      异常：Invalid keystore format，spring boot配置ssl证书格式不合法解决
            https://blog.csdn.net/chen15369337607/article/details/119883054
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
